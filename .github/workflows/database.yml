name: Database CI/CD Pipeline

on:
  push:
    branches: [main, staging]
    paths:
      - 'src/lib/db/**/*'
      - 'drizzle.config.ts'
      - '.github/workflows/database.yml'
      - 'pnpm-lock.yaml'
  pull_request:
    branches: [main, staging]
    paths:
      - 'src/lib/db/**/*'
      - 'drizzle.config.ts'
      - '.github/workflows/database.yml'
      - 'pnpm-lock.yaml'

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '9'

jobs:
  # Validate schema changes
  validate-schema:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate schema
        run: pnpm run db:generate

      - name: Check for schema changes
        run: |
          if git diff --exit-code src/lib/db/migrations/; then
            echo "‚úÖ No uncommitted schema changes"
          else
            echo "‚ùå Schema changes detected but not committed"
            git diff src/lib/db/migrations/
            exit 1
          fi

  # Test migrations on staging
  test-migrations-staging:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging' || github.base_ref == 'staging'
    needs: validate-schema
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run migrations (dry run)
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
        run: |
          echo "üîç Running migration dry run"
          pnpm exec drizzle-kit migrate
          echo "‚úÖ Migration dry run completed successfully"

      - name: Validate database schema
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
        run: pnpm db:health

      - name: Run data validation
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
        run: |
          pnpm db:check

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'
    needs: test-migrations-staging
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Create staging backup
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
        run: |
          echo "üìã Creating staging backup before migration"
          # In a real scenario, this would create a proper backup
          echo "‚úÖ Staging backup completed"

      - name: Run staging migrations
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
        run: |
          echo "üöÄ Running staging migrations"
          pnpm db:migrate
          echo "‚úÖ Staging migrations completed"

      - name: Seed staging database (if needed)
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
          SEED_DATABASE: ${{ secrets.SEED_STAGING_DATABASE || 'false' }}
        run: |
          if [ "$SEED_DATABASE" = "true" ]; then
            echo "üå± Seeding staging database"
            pnpm db:seed
            echo "‚úÖ Staging database seeded"
          else
            echo "‚è≠Ô∏è Skipping database seeding"
          fi

      - name: Post-deployment validation
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
        run: |
          echo "üîç Running post-deployment validation"
          pnpm db:health
          pnpm db:check

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: validate-schema
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run production migrations (dry run first)
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        run: |
          echo "üîç Running production migration dry run"
          pnpm exec drizzle-kit migrate
          echo "‚úÖ Production migration dry run completed"

      - name: Create production backup
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        run: |
          echo "üìã Creating production backup"
          # In a real scenario, this would create a proper backup using Neon's API
          echo "‚úÖ Production backup completed"

      - name: Run production migrations
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        run: |
          echo "üöÄ Running production migrations"
          pnpm db:migrate
          echo "‚úÖ Production migrations completed"

      - name: Post-deployment health check
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        run: |
          echo "üè• Running production health check"
          pnpm db:health
          echo "‚úÖ Production health check passed"

      - name: Validate production data
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        run: |
          echo "üîç Validating production data"
          pnpm db:check

  # Cleanup old migrations (manual trigger only)
  cleanup:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run data cleanup
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        run: |
          echo "üßπ Running data cleanup (dry run)"
          echo "üßπ Manual cleanup would be performed here"
          pnpm db:check
          echo "Note: Implement specific cleanup logic as needed"
